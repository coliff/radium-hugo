import $ from 'jquery'
import Alert from './alert'
import Button from './button'
import Carousel from './carousel'
import Collapse from './collapse'
import Dropdown from './dropdown'
import Modal from './modal'
import Popover from './popover'
import Scrollspy from './scrollspy'
import Tab from './tab'
import Toast from './toast'
import Tooltip from './tooltip'
import Util from './util'
(()=>{if(typeof $==='undefined'){throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.')}
const version=$.fn.jquery.split(' ')[0].split('.')
const minMajor=1
const ltMajor=2
const minMinor=9
const minPatch=1
const maxMajor=4
if(version[0]<ltMajor&&version[1]<minMinor||version[0]===minMajor&&version[1]===minMinor&&version[2]<minPatch||version[0]>=maxMajor){throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0')}})()
export{Util,Alert,Button,Carousel,Collapse,Dropdown,Modal,Popover,Scrollspy,Tab,Toast,Tooltip}
import $ from 'jquery'
import Util from './util'
const NAME='alert'
const VERSION='4.3.1'
const DATA_KEY='bs.alert'
const EVENT_KEY=`.${DATA_KEY}`
const DATA_API_KEY='.data-api'
const JQUERY_NO_CONFLICT=$.fn[NAME]
const Selector={DISMISS:'[data-dismiss="alert"]'}
const Event={CLOSE:`close${EVENT_KEY}`,CLOSED:`closed${EVENT_KEY}`,CLICK_DATA_API:`click${EVENT_KEY}${DATA_API_KEY}`}
const ClassName={ALERT:'alert',FADE:'fade',SHOW:'show'}
class Alert{constructor(element){this._element=element}
static get VERSION(){return VERSION}
close(element){let rootElement=this._element
if(element){rootElement=this._getRootElement(element)}
const customEvent=this._triggerCloseEvent(rootElement)
if(customEvent.isDefaultPrevented()){return}
this._removeElement(rootElement)}
dispose(){$.removeData(this._element,DATA_KEY)
this._element=null}
_getRootElement(element){const selector=Util.getSelectorFromElement(element)
let parent=false
if(selector){parent=document.querySelector(selector)}
if(!parent){parent=$(element).closest(`.${ClassName.ALERT}`)[0]}
return parent}
_triggerCloseEvent(element){const closeEvent=$.Event(Event.CLOSE)
$(element).trigger(closeEvent)
return closeEvent}
_removeElement(element){$(element).removeClass(ClassName.SHOW)
if(!$(element).hasClass(ClassName.FADE)){this._destroyElement(element)
return}
const transitionDuration=Util.getTransitionDurationFromElement(element)
$(element).one(Util.TRANSITION_END,(event)=>this._destroyElement(element,event)).emulateTransitionEnd(transitionDuration)}
_destroyElement(element){$(element).detach().trigger(Event.CLOSED).remove()}
static _jQueryInterface(config){return this.each(function(){const $element=$(this)
let data=$element.data(DATA_KEY)
if(!data){data=new Alert(this)
$element.data(DATA_KEY,data)}
if(config==='close'){data[config](this)}})}
static _handleDismiss(alertInstance){return function(event){if(event){event.preventDefault()}
alertInstance.close(this)}}}
$(document).on(Event.CLICK_DATA_API,Selector.DISMISS,Alert._handleDismiss(new Alert()))
$.fn[NAME]=Alert._jQueryInterface
$.fn[NAME].Constructor=Alert
$.fn[NAME].noConflict=()=>{$.fn[NAME]=JQUERY_NO_CONFLICT
return Alert._jQueryInterface}
export default Alert
import $ from 'jquery'
const NAME='button'
const VERSION='4.3.1'
const DATA_KEY='bs.button'
const EVENT_KEY=`.${DATA_KEY}`
const DATA_API_KEY='.data-api'
const JQUERY_NO_CONFLICT=$.fn[NAME]
const ClassName={ACTIVE:'active',BUTTON:'btn',FOCUS:'focus'}
const Selector={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:'input:not([type="hidden"])',ACTIVE:'.active',BUTTON:'.btn'}
const Event={CLICK_DATA_API:`click${EVENT_KEY}${DATA_API_KEY}`,FOCUS_BLUR_DATA_API:`focus${EVENT_KEY}${DATA_API_KEY} `+
`blur${EVENT_KEY}${DATA_API_KEY}`}
class Button{constructor(element){this._element=element}
static get VERSION(){return VERSION}
toggle(){let triggerChangeEvent=true
let addAriaPressed=true
const rootElement=$(this._element).closest(Selector.DATA_TOGGLE)[0]
if(rootElement){const input=this._element.querySelector(Selector.INPUT)
if(input){if(input.type==='radio'){if(input.checked&&this._element.classList.contains(ClassName.ACTIVE)){triggerChangeEvent=false}else{const activeElement=rootElement.querySelector(Selector.ACTIVE)
if(activeElement){$(activeElement).removeClass(ClassName.ACTIVE)}}}
if(triggerChangeEvent){if(input.hasAttribute('disabled')||rootElement.hasAttribute('disabled')||input.classList.contains('disabled')||rootElement.classList.contains('disabled')){return}
input.checked=!this._element.classList.contains(ClassName.ACTIVE)
$(input).trigger('change')}
input.focus()
addAriaPressed=false}}
if(addAriaPressed){this._element.setAttribute('aria-pressed',!this._element.classList.contains(ClassName.ACTIVE))}
if(triggerChangeEvent){$(this._element).toggleClass(ClassName.ACTIVE)}}
dispose(){$.removeData(this._element,DATA_KEY)
this._element=null}
static _jQueryInterface(config){return this.each(function(){let data=$(this).data(DATA_KEY)
if(!data){data=new Button(this)
$(this).data(DATA_KEY,data)}
if(config==='toggle'){data[config]()}})}}
$(document).on(Event.CLICK_DATA_API,Selector.DATA_TOGGLE_CARROT,(event)=>{event.preventDefault()
let button=event.target
if(!$(button).hasClass(ClassName.BUTTON)){button=$(button).closest(Selector.BUTTON)}
Button._jQueryInterface.call($(button),'toggle')}).on(Event.FOCUS_BLUR_DATA_API,Selector.DATA_TOGGLE_CARROT,(event)=>{const button=$(event.target).closest(Selector.BUTTON)[0]
$(button).toggleClass(ClassName.FOCUS,/^focus(in)?$/.test(event.type))})
$.fn[NAME]=Button._jQueryInterface
$.fn[NAME].Constructor=Button
$.fn[NAME].noConflict=()=>{$.fn[NAME]=JQUERY_NO_CONFLICT
return Button._jQueryInterface}
export default Button